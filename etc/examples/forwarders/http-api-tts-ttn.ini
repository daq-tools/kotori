; ------------------------------------------
; Family:   Protocol forwarder
; About:    Versatile protocol forwarder components for bridging the gap between
;           different data sinks, bus systems and serialization formats.
; ------------------------------------------
; Name:     TTS/TTN-to-MQTT protocol forwarder
; About:    Suitable for data acquisition via TTS/TTN Webhook HTTP POST requests.
; Channel:  Transport: HTTP, MQTT; Format: JSON
; See also: https://getkotori.org/docs/handbook/forwarders/tts-ttn.html
;           https://getkotori.org/docs/handbook/acquisition/protocol/http.html
;           https://getkotori.org/docs/handbook/decoders/
; ------------------------------------------
; Description:
;
;         - Listen to HTTP POST or PUT requests
;         - Receive payloads formatted as JSON or in urlencoded format
;         - Decode payloads using specific decoders
;         - Forward payloads to the MQTT bus
;
; Manual:   Please specify forwarding source and target parameters in URI format.
;           The MQTT topic path is derived from the HTTP URI path by interpolating
;           the appropriate part of the context URI.
;
; Example:  In the example below, given the "address" part of the resource URI
;           is "testdrive/area-42/node-1", data sent to the full URIs
;
;               /api/mqttkit-1/ttn/{devID}
;               /api/mqttkit-1/ttn/{devID}/uplinks
;               /api/mqttkit-1/ttn/{devID}/join-accept
;               /api/mqttkit-1/ttn/{devID}/downlink-ack
;
;           with, e.g.::
;
;               devID=mqttkit-1/testdrive/area-42/node-1
;
;           will be republished to the MQTT topics
;
;               mqttkit-1/testdrive/area-42/node-1/data.json
;               mqttkit-1/testdrive/area-42/node-1/events.json
;
; ------------------------------------------


[mqttkit-1.http-api-tts-ttn.composite]
enable      = false
type        = application
realm       = mqttkit-1
mqtt_topics = mqttkit-1/#
app_factory = kotori.daq.application.composite:boot
services    = kotori.daq.services.mig:MqttInfluxGrafanaService
graphing    = kotori.daq.graphing.grafana:GrafanaManager
strategy    = kotori.daq.strategy.tts_ttn:TheThingsWanBusStrategy



[mqttkit-1.http-api-tts-ttn]
enable          = true

type            = application
application     = kotori.io.protocol.forwarder:boot
#app_factory     = kotori.daq.application.composite:boot

realm           = mqttkit-1
source          = http:/api/{realm:mqttkit-1}/ttn/{device_id:.*}/{slot:(uplinks|join-accept|downlink-ack)} [POST]
target          = mqtt:/{realm}/{address}/ttn/{slot}.json
transform       = kotori.daq.strategy.tts_ttn:TheThingsWanBusStrategy.topic_to_topology


; ------------------------------------------------
;   Notes about "source" and "target" parameters
; ------------------------------------------------

; Note that the "netloc" part (i.e. for specifying hostname/port)
; in directives "source" and "target" are omitted from these uris.
;
; Kotori will only listen to the default HTTP port and forward
; payloads to the default MQTT broker. Both are specified in the
; main configuration file, usually "/etc/kotori/kotori.ini".
;
; However, this might change in the future to enable spinning
; up HTTP listeners on arbitrary ports at runtime and to allow
; publishing messages to different MQTT brokers.
